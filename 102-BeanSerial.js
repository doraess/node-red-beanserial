// Generated by CoffeeScript 1.7.1

/*
scanBLE.js
Scans for a specific Bluetooth 4 (BLE) Device (by Name and UUID)
Returns the Name the of Device when found and stops scanning
Requires Noble: https://github.com/sandeepmistry/noble
Copyright 2013 Charalampos Doukas - @BuildingIoT

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
 */

(function() {
  var Bean, RED, async, commands, crc, decodeMessage, noble, sendCommand;

  Bean = function(n) {
    var msg, node;
    RED.nodes.createNode(this, n);
    msg = {};
    this.ble_name = void 0;
    node = this;
    this.command = n.command;
    this.uuid = n.uuid;
    this.active = false;
    node.status({
      fill: "grey",
      shape: "dot",
      text: "no data"
    });
    this.on("input", function(msg) {
      this.active = true;
      noble.startScanning();
      this.message = msg.topic;
      return this.value = msg.payload;
    });
    this.on("close", function() {
      var err;
      try {
        return noble.stopScanning();
      } catch (_error) {
        err = _error;
        return console.log(err);
      }
    });
    noble.on("scanStart", function(msg) {
      msg = {};
      msg.topic = node.topic;
      msg.payload = "Scanning initiated...";
    });
    return noble.on("discover", function(peripheral) {
      msg = {};
      msg.topic = node.topic;
      msg.payload = "not found";
      peripheral.on("connect", function() {
        if (node.active) {
          node.status({
            fill: "green",
            shape: "dot",
            text: "connected"
          });
          return console.log("Connected");
        }
      });
      peripheral.on("disconnect", function() {
        if (node.active) {
          node.status({
            fill: "green",
            shape: "ring",
            text: "disconnected"
          });
          console.log("Disconnected");
        }
        return node.active = false;
      });
      if (peripheral.uuid === node.uuid && node.active) {
        node.status({
          fill: "yellow",
          shape: "ring",
          text: "found"
        });
        msg.payload = peripheral.advertisement;
        noble.stopScanning();
        return peripheral.connect(function(error) {
          if (error) {
            node.status({
              fill: "red",
              shape: "dot",
              text: "error"
            });
            return console.log("Connection error:" + error);
          } else {
            return peripheral.discoverServices([], function(error, services) {
              node.status({
                fill: "blue",
                shape: "dot",
                text: "quering"
              });
              if (error) {
                node.status({
                  fill: "red",
                  shape: "dot",
                  text: "error"
                });
                return console.log("Query error:" + error);
              } else {
                return services[4].discoverCharacteristics([], function(err, characteristics) {
                  var characteristic;
                  characteristic = characteristics[0];
                  characteristic.on("read", function(data) {
                    console.log(data);
                    decodeMessage(data);
                    return peripheral.disconnect();
                  });
                  return characteristic.notify(true, function(err) {
                    if (err) {
                      throw err;
                    }
                    console.log("Successfully subscribed to Bean serial notifications.");
                    return sendCommand(characteristic, commands[node.command], new Buffer([]), function() {
                      return node.send(msg);
                    });
                  });
                });
              }
            });
          }
        });
      }
    });
  };

  sendCommand = function(characteristic, cmdBuffer, payloadBuffer, callback) {
    var crc16Buffer, crcString, gattBuffer, gstBuffer, header, sizeBuffer;
    sizeBuffer = new Buffer(2);
    sizeBuffer.writeUInt8(cmdBuffer.length + payloadBuffer.length, 0);
    sizeBuffer.writeUInt8(0, 1);
    gstBuffer = Buffer.concat([sizeBuffer, cmdBuffer, payloadBuffer]);
    crcString = crc.crc16ccitt(gstBuffer);
    crc16Buffer = new Buffer(crcString, "hex");
    gattBuffer = new Buffer(1 + gstBuffer.length + crc16Buffer.length);
    header = ((this.count++ * 0x20) | 0x80) & 0xff;
    gattBuffer[0] = header;
    gstBuffer.copy(gattBuffer, 1, 0);
    gattBuffer[gattBuffer.length - 2] = crc16Buffer[1];
    gattBuffer[gattBuffer.length - 1] = crc16Buffer[0];
    return characteristic.write(gattBuffer, false, function(error) {
      if (error) {
        return console.log(error);
      } else {
        console.log("Done");
        return callback();
      }
    });
  };

  decodeMessage = function(message) {
    var crc16, crcString, key, seq, size, type, valid, value, _results;
    seq = message[0];
    size = message[1];
    crcString = crc.crc16ccitt(message.slice(1, +(size + 3) + 1 || 9e9));
    crc16 = new Buffer(crcString, 'hex');
    console.log(crc16);
    valid = crc16[0] === message[message.length - 1] && crc16[1] === message[message.length - 2];
    type = new Buffer([message[3], message[4]]);
    _results = [];
    for (key in commands) {
      value = commands[key];
      if (value[0] === type[0] && value[1] === type[1]) {
        _results.push(console.log("" + key + ": length:" + (parseInt(size)) + " crc:" + crc16[0] + crc16[1]));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  RED = require(process.env.NODE_RED_HOME + "/red/red");

  noble = require("noble");

  async = require("async");

  crc = require('crc');

  RED.nodes.registerType("Bean Serial", Bean);

  commands = {
    MSG_ID_SERIAL_DATA: new Buffer([0x00, 0x00]),
    MSG_ID_BT_SET_ADV: new Buffer([0x05, 0x00]),
    MSG_ID_BT_SET_CONN: new Buffer([0x05, 0x02]),
    MSG_ID_BT_SET_LOCAL_NAME: new Buffer([0x05, 0x04]),
    MSG_ID_BT_SET_PIN: new Buffer([0x05, 0x06]),
    MSG_ID_BT_SET_TX_PWR: new Buffer([0x05, 0x08]),
    MSG_ID_BT_GET_CONFIG: new Buffer([0x05, 0x10]),
    MSG_ID_BT_ADV_ONOFF: new Buffer([0x05, 0x12]),
    MSG_ID_BT_SET_SCRATCH: new Buffer([0x05, 0x14]),
    MSG_ID_BT_GET_SCRATCH: new Buffer([0x05, 0x15]),
    MSG_ID_BT_RESTART: new Buffer([0x05, 0x20]),
    MSG_ID_BL_CMD: new Buffer([0x10, 0x00]),
    MSG_ID_BL_FW_BLOCK: new Buffer([0x10, 0x01]),
    MSG_ID_BL_STATUS: new Buffer([0x10, 0x02]),
    MSG_ID_CC_LED_WRITE: new Buffer([0x20, 0x00]),
    MSG_ID_CC_LED_WRITE_ALL: new Buffer([0x20, 0x01]),
    MSG_ID_CC_LED_READ_ALL: new Buffer([0x20, 0x02]),
    MSG_ID_CC_ACCEL_READ: new Buffer([0x20, 0x10]),
    MSG_ID_CC_ACCEL_READ_RSP: new Buffer([0x20, 0x90]),
    MSG_ID_AR_SET_POWER: new Buffer([0x30, 0x00]),
    MSG_ID_AR_GET_CONFIG: new Buffer([0x30, 0x06]),
    MSG_ID_DB_LOOPBACK: new Buffer([0xFE, 0x00]),
    MSG_ID_DB_COUNTER: new Buffer([0xFE, 0x01]),
    MSG_ID_CC_TEMP_READ: new Buffer([0x20, 0x11]),
    MSG_ID_CC_TEMP_READ_RSP: new Buffer([0x20, 0x91]),
    MSG_ID_CC_LED_READ_ALL_RSP: new Buffer([0x20, 0x82])
  };

}).call(this);
